* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                           *
*     Heading      Source code    Clean    Test       Prgm       Prgm       *
*     Statement     Design &      Cmpl.    Results    Matches    Style      *
*                   Use Docs                          Design                *
*                                                                           *
*       03            06           00        03         05        05        *
*                                                                           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

***---------------------------------------------------------------------------***
***                                                                           ***
*** You need to test your programs thoroughly before submitting them.         ***
***      Try inputing characters, blanks, integrals and floating point vaules ***
***      All lab programs will be tested in this way.                         ***
***                                                                           ***
***---------------------------------------------------------------------------***
***                                                                           ***
*** L2-1 failed to compile.                                                   ***
*** L2-1 failed to compile with supplied sample L2-1TestProgram.cpp.          ***
*** Missing Exercise L2-2.                                                    ***
*** Missing Exercise L2-3.                                                    ***
***                                                                           ***
***---------------------------------------------------------------------------***


"G:\Coursework\CIS 23 - Data Structures and Algorithms\2021_Fall\LabAssignments\CRN80725\Lab2\_Lab2Results\Laffey,William\L2-1\L2-1.cpp_" 

/*
    Program name    : L2-1.cpp

    Written by      : William Laffey

    Purpose         : Overloads each operator to produce desired output

    Inputs          : None

    Outputs         : Result of each overloaded operator

    Calls           : Class file called rectangleType.h

    Structure       : BEGIN                                             
                           Straight through, no sub-processes
                      STOP                                              
                           End of process
                                                                        
   ---------------------------------------------------------------------
    Change Log:                                                         
                               Revision                                 
      Date        Changed  Rel Ver Mod Purpose                          
    00/00/21      wlaffey  001.000.000 Initial release of program       
                                                                        */
#include <iostream>
#include <iomanip>
#include "rectangleType.h"
using namespace std;

int main() 
{
    //Header
    cout << endl << "William Laffey\t"
         << "L2-1\t"
         << "L2-1.exe" << endl;

    //declare objects 
    rectangleType r1(10, 10);
    rectangleType r2(10, 10);
    rectangleType sum;

    //test pre increment
    ++r1;
    cout << "\nNew length and width is " << r1.getLength() << " and " << r1.getWidth() << endl;
    //test post increment
    r1++;
    cout << "New length and width is " << r1.getLength() << " and " << r1.getWidth() << endl;
    //test pre decrement
    --r1;
    cout << "New length and width is " << r1.getLength() << " and " << r1.getWidth() << endl;
    //test post decrement
    r1--;
    cout << "New length and width is " << r1.getLength() << " and " << r1.getWidth() << endl;

    //tests + operator
    sum = r1 + r2;
    cout << "New rectangle dimensions are " << sum.getLength() << " and " << sum.getWidth() << endl;
    //tests - operator
    sum = r1 - r2;
    cout << "New rectangle dimensions are " << sum.getLength() << " and " << sum.getWidth() << endl;
    //tests * operator
    sum = r1 * r2;
    cout << "New rectangle dimensions are " << sum.getLength() << " and " << sum.getWidth() << endl;

    //tests == operator
    if (r1 == r2)
        cout << "r1 is the same as r2" << endl;
    else   
        cout << "r1 is not the same as r2" << endl;
    //tests != operator
    if (r1 != r2)
        cout << "r1 is not equal to r2" << endl;
    else   
        cout << "r1 is equal to r2" << endl;
    //tests <= operator
    if (r1 <= r2)
        cout << "r1 is less than or equal to r2" << endl;
    else   
        cout << "r1 is greater than r2" << endl;
    //tests < operator
    if (r1 < r2)
        cout << "r1 is less than r2" << endl;
    else   
        cout << "r1 is greater than r2" << endl;
    //tests >= operator
    if (r1 >= r2)
        cout << "r1 is greater than or equal to r2" << endl;
    else   
        cout << "r1 is less than r2" << endl;
    //tests > operator
    if (r1 > r2)
        cout << "r1 is greater than r2" << endl;
    else   
        cout << "r1 is less than r2" << endl;

    //Waits for input to close program
    char q;
    cout << "\nPress any key to Exit.";
    cin.ignore(2, '\n');
    cin.get(q);

    return 0;
}

"G:\Coursework\CIS 23 - Data Structures and Algorithms\2021_Fall\LabAssignments\CRN80725\Lab2\_Lab2Results\Laffey,William\L2-1\rectangleType.cpp" 
#include <iostream>          //INSTRUCTOR CORRECTION
#include "rectangleType.h"   //INSTRUCTOR CORRECTION
                             //INSTRUCTOR CORRECTION
using namespace std;         //INSTRUCTOR CORRECTION


double rectangleType::getLength() const {
     return length;
 }
 double rectangleType::getWidth() const {
     return width;
 }
 double rectangleType::area() const  { 
     return length * width;  
 } 
 double rectangleType::perimeter() const {
     return 2 * (length + width);
 }
 void rectangleType::setDimension(double l, double w) {
     if (l >= 0)
         length = l;
     else
         length = 0;
 
     if ( w>= 0)
         width = w;
     else
         width = 0;
 }
 
 rectangleType::rectangleType() {
     length = 0;
     width = 0;
 }
 rectangleType::rectangleType(double l, double w) {
     setDimension(l, w);
 }
 
//INSTRUCTOR CORRECTION---> ostream& operator<<(ostream&, const rectangleType&) {
							ostream& operator<<(ostream& ostreamObj, const rectangleType&) {	//INSTRUCTOR CORRECTION
	return ostreamObj;	//INSTRUCTOR CORRECTION
 }
//INSTRUCTOR CORRECTION---> istream& operator>>(istream&, rectangleType&) {
							istream& operator>>(istream& istreamObj, rectangleType&) {	//INSTRUCTOR CORRECTION
	return istreamObj; //INSTRUCTOR CORRECTION
 
 }
 
 rectangleType rectangleType::operator + (const rectangleType& rectangle) const {
     rectangleType newRectangle;
     newRectangle.length = length + rectangle.length;
     newRectangle.width = width + rectangle.width;
     return newRectangle;
 }
 rectangleType rectangleType::operator - (const rectangleType& rectangle) const {
     rectangleType newRectangle;
     newRectangle.length = length - rectangle.length;
     newRectangle.width = width - rectangle.width;
 
     if (newRectangle.length < 0)
         newRectangle.length = 0;
     if (newRectangle.width < 0)
         newRectangle.width = 0;
 
     return newRectangle;
 }
 rectangleType rectangleType::operator * (const rectangleType& rectangle) const {
     rectangleType newRectangle;
     newRectangle.length = length * rectangle.length;
     newRectangle.width = width * rectangle.width;
     return newRectangle;
 }
 rectangleType rectangleType::operator ++ () {
     this->length++;
     this->width++;
     return(*this);
 }  
 rectangleType rectangleType::operator ++ (int u) {
     rectangleType temp = *this;
     length++;
     width++;
     return temp;
 }
 rectangleType rectangleType::operator -- () {
     this->length--;
     this->width--;
     return(*this);
 }
 rectangleType rectangleType::operator -- (int u) {
     rectangleType temp = *this;
     length--;
     width--;
     return temp;
 }
 
 bool rectangleType::operator == (const rectangleType& rectangle) const {
     return (this->area() == rectangle.area());
 }
 bool rectangleType::operator != (const rectangleType& rectangle) const {
     return (this->area() != rectangle.area());
 }
 bool rectangleType::operator <= (const rectangleType& rectangle) const {
     return (this->area() <= rectangle.area());
 }
 bool rectangleType::operator < (const rectangleType& rectangle) const {
     return (this->area() < rectangle.area());
 }
 bool rectangleType::operator >= (const rectangleType& rectangle) const {
     return (this->area() >= rectangle.area());
 }
 bool rectangleType::operator > (const rectangleType& rectangle) const {
     return (this->area() > rectangle.area());
 }


"G:\Coursework\CIS 23 - Data Structures and Algorithms\2021_Fall\LabAssignments\CRN80725\Lab2\_Lab2Results\Laffey,William\L2-1\rectangleType.h" 
#pragma once
using namespace std;

class rectangleType {
    public:
        double getLength() const;
        double getWidth() const;
        double area() const;
        double perimeter() const;
        void setDimension(double l, double w);

        friend ostream& operator<<(ostream&, const rectangleType&);
        friend istream& operator>>(istream&, rectangleType&);

        rectangleType operator + (const rectangleType&) const;
        rectangleType operator - (const rectangleType&) const;
        rectangleType operator * (const rectangleType&) const;
        rectangleType operator ++ ();   
        rectangleType operator ++ (int);
        rectangleType operator -- ();   
        rectangleType operator -- (int);
        bool operator == (const rectangleType&) const;
        bool operator != (const rectangleType&) const;
        bool operator <= (const rectangleType&) const;
        bool operator < (const rectangleType&) const;
        bool operator >= (const rectangleType&) const;
        bool operator > (const rectangleType&) const;

        rectangleType();
        rectangleType(double l, double w);

    private:
        double length;
        double width;
};

//INSTRUCTOR CORRECTION--->***---------------------------------------------------------------------------***
//INSTRUCTOR CORRECTION--->***                                                                           ***
//INSTRUCTOR CORRECTION--->***  Duplicated in the rectangleType.cpp file                                 ***
//INSTRUCTOR CORRECTION--->***                                                                           ***
//INSTRUCTOR CORRECTION--->***---------------------------------------------------------------------------***
//INSTRUCTOR CORRECTION---> double rectangleType::getLength() const {
//INSTRUCTOR CORRECTION--->     return length;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> double rectangleType::getWidth() const {
//INSTRUCTOR CORRECTION--->     return width;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> double rectangleType::area() const  { 
//INSTRUCTOR CORRECTION--->     return length * width;  
//INSTRUCTOR CORRECTION---> } 
//INSTRUCTOR CORRECTION---> double rectangleType::perimeter() const {
//INSTRUCTOR CORRECTION--->     return 2 * (length + width);
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> void rectangleType::setDimension(double l, double w) {
//INSTRUCTOR CORRECTION--->     if (l >= 0)
//INSTRUCTOR CORRECTION--->         length = l;
//INSTRUCTOR CORRECTION--->     else
//INSTRUCTOR CORRECTION--->         length = 0;
//INSTRUCTOR CORRECTION---> 
//INSTRUCTOR CORRECTION--->     if ( w>= 0)
//INSTRUCTOR CORRECTION--->         width = w;
//INSTRUCTOR CORRECTION--->     else
//INSTRUCTOR CORRECTION--->         width = 0;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> 
//INSTRUCTOR CORRECTION---> rectangleType::rectangleType() {
//INSTRUCTOR CORRECTION--->     length = 0;
//INSTRUCTOR CORRECTION--->     width = 0;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> rectangleType::rectangleType(double l, double w) {
//INSTRUCTOR CORRECTION--->     setDimension(l, w);
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> 
//INSTRUCTOR CORRECTION---> //INSTRUCTOR CORRECTION--->	ostream& operator<<(ostream&, const rectangleType&) {
//INSTRUCTOR CORRECTION---> 							ostream& operator<<(ostream& OUT, const rectangleType& RECT) {
//INSTRUCTOR CORRECTION---> 	return OUT;		//INSTRUCTOR CORRECTION	
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> //INSTRUCTOR CORRECTION--->	istream& operator>>(istream&, rectangleType&) {
//INSTRUCTOR CORRECTION---> 							istream& operator>>(istream& IN, rectangleType& RECT) {
//INSTRUCTOR CORRECTION---> 	return IN;		//INSTRUCTOR CORRECTION
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> 
//INSTRUCTOR CORRECTION---> rectangleType rectangleType::operator + (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     rectangleType newRectangle;
//INSTRUCTOR CORRECTION--->     newRectangle.length = length + rectangle.length;
//INSTRUCTOR CORRECTION--->     newRectangle.width = width + rectangle.width;
//INSTRUCTOR CORRECTION--->     return newRectangle;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> rectangleType rectangleType::operator - (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     rectangleType newRectangle;
//INSTRUCTOR CORRECTION--->     newRectangle.length = length - rectangle.length;
//INSTRUCTOR CORRECTION--->     newRectangle.width = width - rectangle.width;
//INSTRUCTOR CORRECTION---> 
//INSTRUCTOR CORRECTION--->     if (newRectangle.length < 0)
//INSTRUCTOR CORRECTION--->         newRectangle.length = 0;
//INSTRUCTOR CORRECTION--->     if (newRectangle.width < 0)
//INSTRUCTOR CORRECTION--->         newRectangle.width = 0;
//INSTRUCTOR CORRECTION---> 
//INSTRUCTOR CORRECTION--->     return newRectangle;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> rectangleType rectangleType::operator * (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     rectangleType newRectangle;
//INSTRUCTOR CORRECTION--->     newRectangle.length = length * rectangle.length;
//INSTRUCTOR CORRECTION--->     newRectangle.width = width * rectangle.width;
//INSTRUCTOR CORRECTION--->     return newRectangle;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> rectangleType rectangleType::operator ++ () {
//INSTRUCTOR CORRECTION--->     this->length++;
//INSTRUCTOR CORRECTION--->     this->width++;
//INSTRUCTOR CORRECTION--->     return(*this);
//INSTRUCTOR CORRECTION---> }  
//INSTRUCTOR CORRECTION---> rectangleType rectangleType::operator ++ (int u) {
//INSTRUCTOR CORRECTION--->     rectangleType temp = *this;
//INSTRUCTOR CORRECTION--->     length++;
//INSTRUCTOR CORRECTION--->     width++;
//INSTRUCTOR CORRECTION--->     return temp;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> rectangleType rectangleType::operator -- () {
//INSTRUCTOR CORRECTION--->     this->length--;
//INSTRUCTOR CORRECTION--->     this->width--;
//INSTRUCTOR CORRECTION--->     return(*this);
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> rectangleType rectangleType::operator -- (int u) {
//INSTRUCTOR CORRECTION--->     rectangleType temp = *this;
//INSTRUCTOR CORRECTION--->     length--;
//INSTRUCTOR CORRECTION--->     width--;
//INSTRUCTOR CORRECTION--->     return temp;
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> 
//INSTRUCTOR CORRECTION---> bool rectangleType::operator == (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     return (this->area() == rectangle.area());
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> bool rectangleType::operator != (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     return (this->area() != rectangle.area());
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> bool rectangleType::operator <= (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     return (this->area() <= rectangle.area());
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> bool rectangleType::operator < (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     return (this->area() < rectangle.area());
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> bool rectangleType::operator >= (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     return (this->area() >= rectangle.area());
//INSTRUCTOR CORRECTION---> }
//INSTRUCTOR CORRECTION---> bool rectangleType::operator > (const rectangleType& rectangle) const {
//INSTRUCTOR CORRECTION--->     return (this->area() > rectangle.area());
//INSTRUCTOR CORRECTION---> }

